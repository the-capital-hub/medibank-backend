generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserMaster {
  ID              BigInt    @id @default(autoincrement())
  MBID            String    @unique
  Password        String
  EmailID         String    @unique
  UserType        String?
  CreatedAt       DateTime  @default(now())
  UpdatedOn       DateTime  @updatedAt
  city            String?
  date_of_birth   DateTime?
  fullname        String
  mobile_num      String    @unique
  sex             String
  state           String?
  profile_Picture String?

doctordetails     DoctorDetails[] @relation("DoctorDetails")
createdDoctors    DoctorDetails[] @relation("CreatedByRelation")
updatedDoctors    DoctorDetails[] @relation("UpdatedByRelation")

appointments            UserAppointment[] @relation("UserAppointments")
createdAppointments     UserAppointment[] @relation("CreatedByRelation")
updatedAppointments     UserAppointment[] @relation("UpdatedByRelation")


  labReports             UserLabReport[]    @relation("UserLabReports")
  createdLabReports      UserLabReport[]    @relation("LabReportCreatedBy")
  updatedLabReports      UserLabReport[]    @relation("LabReportUpdatedBy")


  hospitalReports         UserHospitalReport[] @relation("UserHospitalReports")
  createdHospitalReports  UserHospitalReport[] @relation("HospitalReportCreatedBy")
  updatedHospitalReports  UserHospitalReport[] @relation("HospitalReportUpdatedBy")

  familyMembers          AddFamilyMember[] @relation("AddFamilyMember")
  createdFamilyMembers   AddFamilyMember[] @relation("CreatedByRelation")
  updatedFamilyMembers   AddFamilyMember[] @relation("UpdatedByRelation")

}
model UserAppointment {
  ID              BigInt     @id @default(autoincrement())
  appointmentId   String @unique
  doctorName      String
  selectDate      String
  hospitalName    String
  chiefComplaint  String
  PatientName     String
  remarks         String?
  createdOn       DateTime   @default(now())
  updatedOn       DateTime   @updatedAt
  userId          BigInt
  user            UserMaster @relation("UserAppointments", fields: [userId], references: [ID])
  prescriptionDocType String?
  uploadPrescription String?
  reportDocType String?
  uploadReport String?
  bodyTemp      String?
  heartRate     String?
  respRate      String?
  bloodPres     String?
  spO2          String?
  doctorImage     String?
  createdById     BigInt
  createdBy       UserMaster @relation("CreatedByRelation", fields: [createdById], references: [ID])
  updatedById     BigInt?
  updatedBy       UserMaster? @relation("UpdatedByRelation", fields: [updatedById], references: [ID])

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
}

model DoctorDetails{
ID              BigInt     @id @default(autoincrement())
licenseRegistrationNo String
qualification String
collegeName String
courseYear String
city String?
state String?
userId          BigInt
user            UserMaster @relation("DoctorDetails", fields: [userId], references: [ID])
createdOn       DateTime   @default(now())
updatedOn       DateTime   @updatedAt
createdById     BigInt
createdBy       UserMaster @relation("CreatedByRelation", fields: [createdById], references: [ID])
updatedById     BigInt?
updatedBy       UserMaster? @relation("UpdatedByRelation", fields: [updatedById], references: [ID])

@@index([userId])
@@index([createdById])
@@index([updatedById])

}

model UserLabReport {
  ID              BigInt     @id @default(autoincrement())
  labReportId     String     @unique
 labReportType    String
 selectDate       String
 labName          String
 doctorName       String
 selectFamilyMember String 
  createdOn       DateTime   @default(now())
  updatedOn       DateTime   @updatedAt
  userId          BigInt
  user            UserMaster @relation("UserLabReports", fields: [userId], references: [ID])
  uploadLabReport    String?
  labImage        String?
  docType         String?
  createdById     BigInt
  createdBy       UserMaster @relation("LabReportCreatedBy", fields: [createdById], references: [ID])
  updatedById     BigInt?
  updatedBy       UserMaster? @relation("LabReportUpdatedBy", fields: [updatedById], references: [ID])

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
}

model UserHospitalReport {
  ID              BigInt     @id @default(autoincrement())
hospitalReportId     String     @unique
 hospitalName    String
 selectDate       String
 doctorName       String
 procedure        String
 PatientName     String
 remarks         String?
  createdOn       DateTime   @default(now())
  updatedOn       DateTime   @updatedAt
  userId          BigInt
  user            UserMaster @relation("UserHospitalReports", fields: [userId], references: [ID])
  uploadHospitalReport    String?
  docType        String?
  hospitalImage        String?
  createdById     BigInt
  createdBy       UserMaster @relation("HospitalReportCreatedBy", fields: [createdById], references: [ID])
  updatedById     BigInt?
  updatedBy       UserMaster? @relation("HospitalReportUpdatedBy", fields: [updatedById], references: [ID])

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
}

model AddFamilyMember{
  ID              BigInt     @id @default(autoincrement())
  familyMemberId     String     @unique
  familyMemberName    String
  familyMemberRelation    String
  MBID String
  userId          BigInt
  user            UserMaster @relation("AddFamilyMember", fields: [userId], references: [ID])
  createdOn       DateTime   @default(now())
  updatedOn       DateTime   @updatedAt
  createdById     BigInt
  createdBy       UserMaster @relation("CreatedByRelation", fields: [createdById], references: [ID])
  updatedById     BigInt?
  updatedBy       UserMaster? @relation("UpdatedByRelation", fields: [updatedById], references: [ID])

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
}